# adk-docs Sitemap

The Agent Development Kit (ADK) is a comprehensive, open-source framework designed to streamline the development, evaluation, and deployment of AI agents in both Python and Java. It emphasizes a code-first approach, offering modularity, flexibility, and compatibility with various models and deployment environments like Google Cloud's Vertex AI Agent Engine, Cloud Run, and GKE. ADK provides core primitives such as Agents (LLM, Workflow, Custom), Tools (Function, Built-in, Third-Party, OpenAPI, Google Cloud, MCP), Callbacks, Session Management, Memory, Artifact Management, and a robust Runtime with an Event Loop for orchestrating complex workflows. 

The documentation covers a wide array of functionalities, from basic agent creation and local testing using the Dev UI and CLI, to advanced topics like multi-agent system design, authentication for tools, and performance optimization through parallel execution. It also delves into crucial aspects of agent development such as observability with integrations like AgentOps, Cloud Trace, Phoenix, and Weave, and implementing strong safety and security guardrails using callbacks and plugins. Furthermore, ADK supports grounding capabilities with Google Search and Vertex AI Search for accurate, real-time information retrieval.

Overall, the ADK aims to empower developers to build sophisticated, context-aware, and reliable AI applications. The provided tutorials and quickstarts guide users through progressive learning, enabling them to master agent composition, state management, and deployment strategies for diverse use cases, ensuring agents can operate effectively and securely in production environments.

## Home

- [CONTRIBUTING.md](https://github.com/gcp/adk-docs/blob/main/CONTRIBUTING.md): This document outlines the contribution guidelines for the ADK project, emphasizing the need to sign a Contributor License Agreement and review community guidelines. It details the contribution workflow, including finding tasks on GitHub Issues, setting up the development environment, and the code review process via Pull Requests. The document encourages community involvement and provides resources for getting started with contributions.
- [README.md](https://github.com/gcp/adk-docs/blob/main/README.md): This README introduces the Agent Development Kit (ADK), an open-source, code-first toolkit for building, evaluating, and deploying AI agents. It highlights key features such as a rich tool ecosystem, modular multi-agent systems, tracing, monitoring, and deployment flexibility. The document also provides installation instructions for Python and Java, links to full documentation, and invites community contributions.

## Docs

- [community.md](https://github.com/gcp/adk-docs/blob/main/docs/community.md): This page highlights community-maintained resources for the Agent Development Kit (ADK), emphasizing that Google does not provide support for these external contents. It lists community-provided translations of ADK documentation in Chinese, Korean, and Japanese. The page also features community-written tutorials, guides, blog posts, and videos showcasing ADK features and use cases, and invites contributions of new resources.
- [contributing-guide.md](https://github.com/gcp/adk-docs/blob/main/docs/contributing-guide.md): This guide details how to contribute to the Agent Development Kit (ADK), covering contributions to its Python/Java core and documentation. It outlines prerequisites like signing a Contributor License Agreement and reviewing community guidelines. The document explains various ways to contribute, including reporting issues, suggesting enhancements, improving documentation, and writing code, all managed through GitHub Pull Requests.
- [index.md](https://github.com/gcp/adk-docs/blob/main/docs/index.md): This document introduces the Agent Development Kit (ADK), a flexible and modular framework for developing and deploying AI agents. It highlights ADK's model-agnostic, deployment-agnostic, and framework-compatible nature, designed to make agent development feel more like software development. Key features include flexible orchestration, multi-agent systems, a rich tool ecosystem, deployment readiness, built-in evaluation, and safety features.

## Docs A2A

- [index.md](https://github.com/gcp/adk-docs/blob/main/docs/a2a/index.md): This document serves as a comprehensive guide to building multi-agent systems in ADK using the Agent2Agent (A2A) Protocol. It provides an introduction to A2A fundamentals, including quickstarts for both exposing and consuming remote agents. The document links to the official A2A Protocol website for further information on secure and efficient agent communication.
- [intro.md](https://github.com/gcp/adk-docs/blob/main/docs/a2a/intro.md): This document introduces the Agent2Agent (A2A) Protocol in ADK, explaining its role in enabling specialized agents to communicate and collaborate across a network. It distinguishes A2A remote agents from local sub-agents, providing concrete examples of when to use each for integration, microservices, cross-language communication, and formal API enforcement. The document visualizes the A2A workflow, showing how ADK simplifies exposing and consuming agents.
- [quickstart-consuming.md](https://github.com/gcp/adk-docs/blob/main/docs/a2a/quickstart-consuming.md): This quickstart demonstrates how an ADK agent can consume a remote agent via the Agent-to-Agent (A2A) Protocol, crucial for building complex multi-agent systems. It outlines the project structure for a sample with local and remote agents, detailing how to expose the remote agent using `adk api_server --a2a`. The document explains how the main agent uses `RemoteA2aAgent()` to interact with the remote service, providing examples of simple, prime number, and combined operations.
- [quickstart-exposing.md](https://github.com/gcp/adk-docs/blob/main/docs/a2a/quickstart-exposing.md): This quickstart guides developers on exposing an ADK agent for Agent-to-Agent (A2A) communication, enabling other agents to use it. It explains two methods: `to_a2a()` for auto-generating agent cards and simplified exposure via `uvicorn`, and creating `agent.json` for `adk api_server`. The document provides a sample setup with a remote Hello World agent and a consuming root agent, detailing steps to start the server, verify its operation, and interact with the exposed agent.

## Docs Agents

- [config.md](https://github.com/gcp/adk-docs/blob/main/docs/agents/config.md): This document introduces the experimental ADK Agent Config feature, allowing users to build and run ADK agents using YAML text files without writing code. It outlines the setup process, including ADK installation and environment variable configuration for Gemini models. The guide provides examples for defining agents with built-in tools, custom tools, and sub-agents, and discusses deployment options and current limitations.
- [custom-agents.md](https://github.com/gcp/adk-docs/blob/main/docs/agents/custom-agents.md): This document describes custom agents in ADK, which extend `BaseAgent` to allow arbitrary orchestration logic beyond predefined workflows. It explains how to implement custom execution logic within `_run_async_impl` (or `runAsyncImpl` in Java) for conditional branching, complex state management, and external integrations. The document uses a `StoryFlowAgent` example to illustrate building multi-stage content generation workflows with conditional regeneration.
- [index.md](https://github.com/gcp/adk-docs/blob/main/docs/agents/index.md): This document introduces Agents in ADK as autonomous execution units for achieving specific goals, all based on the `BaseAgent` class. It categorizes agents into LLM Agents, Workflow Agents (Sequential, Parallel, Loop), and Custom Agents, highlighting their primary functions and determinism. The document emphasizes combining these agent types to build sophisticated multi-agent architectures and provides links for deeper dives into each category.
- [llm-agents.md](https://github.com/gcp/adk-docs/blob/main/docs/agents/llm-agents.md): This document details the `LlmAgent` in ADK, a core component leveraging Large Language Models for reasoning and interaction. It explains how to define an agent's identity, guide its behavior with `instruction` (including state templating), and equip it with `tools`. The document also covers advanced configurations like `generate_content_config` for LLM output, `input_schema`/`output_schema` for structured data, `include_contents` for context management, and `planner` for multi-step reasoning.
- [models.md](https://github.com/gcp/adk-docs/blob/main/docs/agents/models.md): This document explains how to integrate various Large Language Models (LLMs) with ADK agents, focusing on Google Gemini models and other proprietary/open-source models. It details authentication methods for Google AI Studio and Vertex AI, and introduces wrapper classes like LiteLLM for broader compatibility. The guide also covers using Anthropic models directly in Java and self-hosted models via LiteLLM.
- [multi-agents.md](https://github.com/gcp/adk-docs/blob/main/docs/agents/multi-agents.md): This document explains how to build Multi-Agent Systems in ADK by composing multiple `BaseAgent` instances, enhancing modularity and reusability. It details ADK primitives for agent composition, including agent hierarchy, workflow agents (`SequentialAgent`, `ParallelAgent`, `LoopAgent`), and interaction mechanisms like shared session state and LLM-driven delegation. The document also outlines common multi-agent patterns such as Coordinator/Dispatcher, Sequential Pipeline, Parallel Fan-Out/Gather, Hierarchical Task Decomposition, Review/Critique, Iterative Refinement, and Human-in-the-Loop.
- [index.md](https://github.com/gcp/adk-docs/blob/main/docs/agents/workflow-agents/index.md): This document introduces workflow agents in ADK as specialized components that control the execution flow of their sub-agents. It highlights three core types: Sequential, Loop, and Parallel agents, each defining a distinct, deterministic execution pattern. The document emphasizes that workflow agents provide predictability, reliability, and structure for building complex processes by orchestrating other agent types.
- [loop-agents.md](https://github.com/gcp/adk-docs/blob/main/docs/agents/workflow-agents/loop-agents.md): This document describes the `LoopAgent` in ADK, a workflow agent that iteratively executes its sub-agents. It explains how the `LoopAgent` repeatedly runs a sequence of agents until a specified number of iterations is reached or a termination condition is met. The document provides an example of iterative document improvement, where a `CriticAgent` can signal to stop the loop, ensuring the process doesn't run indefinitely.
- [parallel-agents.md](https://github.com/gcp/adk-docs/blob/main/docs/agents/workflow-agents/parallel-agents.md): This document describes the `ParallelAgent` in ADK, a workflow agent designed to execute its sub-agents concurrently, significantly speeding up independent tasks. It explains how `ParallelAgent` initiates sub-agent execution simultaneously, with each operating in its own branch without automatic state sharing. The document provides an example of parallel web research and emphasizes explicit communication mechanisms if data sharing is required.
- [sequential-agents.md](https://github.com/gcp/adk-docs/blob/main/docs/agents/workflow-agents/sequential-agents.md): This document describes the `SequentialAgent` in ADK, a workflow agent that executes its sub-agents in a fixed, strict order. It explains how the agent iterates through and runs each sub-agent's `Run Async` method sequentially. The document provides a full example of a code development pipeline, illustrating how output from one sub-agent is passed to the next via shared session state.

## Docs Api-Reference

- [index.md](https://github.com/gcp/adk-docs/blob/main/docs/api-reference/index.md): This document serves as an API Reference for the Agent Development Kit (ADK), providing comprehensive documentation for both Python and Java. It also includes references for the ADK Command Line Interface (CLI), Agent Config YAML syntax, and the REST API for the ADK web server. The document aims to provide developers with detailed information on ADK's modules, classes, functions, and examples.
- [dejavufonts.md](https://github.com/gcp/adk-docs/blob/main/docs/api-reference/java/legal/dejavufonts.md): This document contains the DejaVu fonts v2.37 license, detailing the copyright information for Bitstream Vera Fonts and Arev Fonts. It outlines the permissions granted, including reproduction, distribution, and modification, with specific conditions regarding renaming modified fonts. The license emphasizes that the fonts can be used within larger software packages but not sold independently.
- [jquery.md](https://github.com/gcp/adk-docs/blob/main/docs/api-reference/java/legal/jquery.md): This document contains the jQuery v3.7.1 license, which is a permissive MIT License. It grants broad rights to use, copy, modify, merge, publish, distribute, sublicense, and sell copies of the software. The license explicitly states that the software is provided without warranty and that the authors are not liable for any damages arising from its use.
- [jqueryUI.md](https://github.com/gcp/adk-docs/blob/main/docs/api-reference/java/legal/jqueryUI.md): This document contains the jQuery UI v1.13.2 license, which is a permissive MIT License. It grants broad rights to use, copy, modify, and distribute the software. The license also notes that sample code within the demos directory is waived via CC0, and external libraries in `node_modules` and `external` directories have their own licenses.
- [index.md](https://github.com/gcp/adk-docs/blob/main/docs/api-reference/rest/index.md): This document provides a REST API reference for the ADK web server, detailing endpoints for running agents and managing sessions. It describes the `/run` endpoint for single responses and `/run_sse` for streaming events, both accepting JSON payloads with `app_name`, `user_id`, `session_id`, and `new_message`. The document also defines the structure of `Content` and `Event` objects, and mentions interactive API documentation available at `/docs`.

## Docs Artifacts

- [index.md](https://github.com/gcp/adk-docs/blob/main/docs/artifacts/index.md): This document explains Artifacts in ADK as a mechanism for managing named, versioned binary data associated with sessions or users. It details that Artifacts are represented by `google.genai.types.Part` objects and managed by a dedicated `ArtifactService`. The document covers common use cases for Artifacts, core concepts like filenames and versioning, methods for interacting with Artifacts via context objects, and available implementations like `InMemoryArtifactService` and `GcsArtifactService`.

## Docs Callbacks

- [design-patterns-and-best-practices.md](https://github.com/gcp/adk-docs/blob/main/docs/callbacks/design-patterns-and-best-practices.md): This document outlines various design patterns and best practices for leveraging callbacks in ADK to enhance or control agent behavior. It covers patterns like guardrails, dynamic state management, logging, caching, request/response modification, conditional skipping, tool-specific actions, and artifact handling. The document emphasizes principles like focus, performance, error handling, state management, reliability, testing, and clarity for effective callback implementation.
- [index.md](https://github.com/gcp/adk-docs/blob/main/docs/callbacks/index.md): This document introduces callbacks in ADK as a powerful mechanism to observe, customize, and control agent behavior at specific execution points. It explains how callbacks function as checkpoints before and after agent, LLM, and tool interactions, and how their return values can override default behavior. The document highlights the benefits of callbacks for debugging, implementing guardrails, managing state, and integrating external actions.
- [types-of-callbacks.md](https://github.com/gcp/adk-docs/blob/main/docs/callbacks/types-of-callbacks.md): This document explains various types of callbacks in ADK that trigger at different stages of an agent's execution, categorized into Agent Lifecycle, LLM Interaction, and Tool Execution callbacks. It details when each callback runs, its purpose, and the effect of its return value on the execution flow. Examples are provided for `before_agent_callback`, `after_agent_callback`, `before_model_callback`, `after_model_callback`, `before_tool_callback`, and `after_tool_callback`.

## Docs Context

- [index.md](https://github.com/gcp/adk-docs/blob/main/docs/context/index.md): This document explains the concept of "context" in ADK, which bundles crucial information for agents and tools during operations, enabling state maintenance, data passing, and service access. It details different types of context objects like `InvocationContext`, `ReadonlyContext`, `CallbackContext`, and `ToolContext`, each tailored for specific scenarios. The document also outlines common tasks performed using these context objects, such as accessing state, managing artifacts, handling authentication, and leveraging memory.

## Docs Deploy

- [agent-engine.md](https://github.com/gcp/adk-docs/blob/main/docs/deploy/agent-engine.md): This guide provides a step-by-step walkthrough for deploying ADK agents to Vertex AI Agent Engine, a fully managed Google Cloud service for scaling AI agents. It covers prerequisites like a GCP project, authenticated gcloud CLI, and a GCS bucket, along with Python SDK installation. The document explains how to define and prepare an agent, test it locally, deploy it using either ADK CLI or Python SDK, and interact with the deployed agent.
- [cloud-run.md](https://github.com/gcp/adk-docs/blob/main/docs/deploy/cloud-run.md): This document outlines how to deploy Agent Development Kit (ADK) agents to Google Cloud Run, offering both a recommended `adk CLI` command and a `gcloud CLI` method. It details project structure requirements for Python and Java agents, environment variable setup, and the content included in the deployment payload. The guide also provides instructions for testing deployed agents via UI or cURL, and explains how to configure for multiple agents.
- [gke.md](https://github.com/gcp/adk-docs/blob/main/docs/deploy/gke.md): This document provides a comprehensive guide to deploying ADK agents on Google Kubernetes Engine (GKE), covering both manual and automated methods. It details environment variable setup, API and permission enablement, and the creation of necessary files like `main.py`, `requirements.txt`, and `Dockerfile`. The guide also includes troubleshooting tips for common deployment issues and cleanup instructions for GKE resources.
- [index.md](https://github.com/gcp/adk-docs/blob/main/docs/deploy/index.md): This document outlines the various deployment options available for Agent Development Kit (ADK) agents after they have been built and tested. It covers deployment to Vertex AI Agent Engine for managed auto-scaling, Cloud Run for container-based applications, and Google Kubernetes Engine (GKE) for more control. The guide also mentions manual packaging into container images for deployment on other container-friendly infrastructures like Docker or Podman.

## Docs Evaluate

- [index.md](https://github.com/gcp/adk-docs/blob/main/docs/evaluate/index.md): This document emphasizes the importance of evaluating AI agents beyond traditional unit tests due to their probabilistic nature, focusing on both final response quality and execution trajectory. It outlines objectives for agent evaluations, including defining success criteria and identifying critical tasks. The document details two evaluation approaches in ADK: using test files for unit testing and evalset files for integration tests, along with methods to run evaluations via web UI, `pytest`, and CLI.

## Docs Events

- [index.md](https://github.com/gcp/adk-docs/blob/main/docs/events/index.md): This document explains that Events are fundamental units of information flow in ADK, representing every significant occurrence during an agent's interaction. It details the structure of an Event, its role in communication, signaling state/artifact changes, and controlling flow. The document provides guidance on identifying event origin and type, extracting key information, detecting actions and side effects, and determining final responses, along with best practices for working with events.

## Docs Get-Started

- [about.md](https://github.com/gcp/adk-docs/blob/main/docs/get-started/about.md): This document introduces the Agent Development Kit (ADK), an open-source framework for building, evaluating, and deploying AI-powered agents. It outlines core concepts like Agents, Tools, Callbacks, Session Management, Memory, and Artifact Management, explaining their roles in creating flexible and powerful agentic applications. The document also highlights ADK's key capabilities, including multi-agent system design, rich tool ecosystem, flexible orchestration, integrated developer tooling, native streaming support, built-in evaluation, broad LLM support, extensibility, and state/memory management.
- [index.md](https://github.com/gcp/adk-docs/blob/main/docs/get-started/index.md): This document serves as a getting started guide for the Agent Development Kit (ADK), a framework for building, managing, evaluating, and deploying AI agents. It provides links to installation instructions, quickstarts for basic and streaming agents, and a tutorial for multi-agent systems. The document also offers resources for discovering sample agents and learning about ADK's core components.
- [installation.md](https://github.com/gcp/adk-docs/blob/main/docs/get-started/installation.md): This document provides instructions for installing the Agent Development Kit (ADK) for both Python and Java. For Python, it recommends creating and activating a virtual environment before installing `google-adk` via pip. For Java, it details adding `google-adk` and `google-adk-dev` dependencies using Maven or Gradle. The document concludes by directing users to the Quickstart guide for creating their first agent.
- [quickstart.md](https://github.com/gcp/adk-docs/blob/main/docs/get-started/quickstart.md): This quickstart guides users through installing ADK, setting up a basic multi-tool agent, and running it locally. It covers creating the project structure, configuring the LLM model with API keys for Google AI Studio or Vertex AI, and interacting with the agent via the Dev UI (`adk web`), terminal (`adk run`), or API Server (`adk api_server`). The document includes example prompts and troubleshooting tips for Windows users.
- [index.md](https://github.com/gcp/adk-docs/blob/main/docs/get-started/streaming/index.md): This document provides quickstart examples for enabling streaming capabilities in ADK for both Python and Java. It highlights the ability to create real-time, interactive AI agents with features like live voice conversations and continuous updates. The page offers links to specific quickstart guides for Python and Java streaming implementations.
- [quickstart-streaming-java.md](https://github.com/gcp/adk-docs/blob/main/docs/get-started/streaming/quickstart-streaming-java.md): This quickstart guides Java developers through creating a basic agent and leveraging ADK Streaming for low-latency, bidirectional voice interactions. It covers setting up the Java and Maven environment, creating a `ScienceTeacherAgent`, and running it with the Dev UI for text and live audio streaming. The document also includes instructions for configuring environment variables and creating a custom live audio application.
- [quickstart-streaming.md](https://github.com/gcp/adk-docs/blob/main/docs/get-started/streaming/quickstart-streaming.md): This quickstart guides users through creating a simple Google Search agent and enabling low-latency, bidirectional voice and video communication using ADK Streaming in Python. It covers environment setup, ADK installation, project structure, agent definition with Google Search tool, and platform configuration (Google AI Studio or Vertex AI). The document also explains how to interact with the agent via `adk web` for text, voice, and video, and provides troubleshooting tips.
- [testing.md](https://github.com/gcp/adk-docs/blob/main/docs/get-started/testing.md): This document explains how to test ADK agents locally using the ADK API server, accessible via `adk api_server` for Python or Maven commands for Java. It guides users through launching the server, creating new sessions with optional state, and sending queries via `/run` or `/run_sse` endpoints. The document also highlights debugging with interactive API docs and discusses deployment options for verified agents.

## Docs Grounding

- [google_search_grounding.md](https://github.com/gcp/adk-docs/blob/main/docs/grounding/google_search_grounding.md): This document explains Google Search Grounding in ADK, enabling AI agents to access real-time web information for accurate, sourced responses. It provides a quickstart guide for setting up a Google Search-enabled agent, including environment setup, project creation, and platform choice (Google AI Studio or Vertex AI). The document details the data flow, how to interpret grounded responses and their metadata, and best practices for displaying search suggestions and citations.
- [vertex_ai_search_grounding.md](https://github.com/gcp/adk-docs/blob/main/docs/grounding/vertex_ai_search_grounding.md): This document explains how Vertex AI Search Grounding in ADK enables AI agents to access private enterprise documents for accurate, source-attributed responses. It provides a quickstart guide for setting up a Vertex AI Search-enabled agent, including preparing the data store and authentication. The document details the data flow, how to interpret grounded responses and their metadata, and best practices for displaying citations and document references.

## Docs Mcp

- [index.md](https://github.com/gcp/adk-docs/blob/main/docs/mcp/index.md): This document introduces the Model Context Protocol (MCP) as an open standard for LLMs to communicate with external applications, data, and tools. It explains MCP's client-server architecture and how ADK integrates with it, both by using existing MCP servers and by exposing ADK tools via an MCP server. The document highlights the MCP Toolbox for Databases, an open-source server for secure database integration, and mentions FastMCP and MCP Tools for Genmedia Services.

## Docs Observability

- [agentops.md](https://github.com/gcp/adk-docs/blob/main/docs/observability/agentops.md): This document describes how to integrate AgentOps for enhanced observability of ADK agents with just two lines of code. AgentOps provides session replays, metrics, and monitoring, complementing ADK's native OpenTelemetry tracing. It explains how AgentOps neutralizes ADK's telemetry and controls span creation for agent execution, LLM interactions, and tool usage, offering detailed visualization in the AgentOps dashboard.
- [arize-ax.md](https://github.com/gcp/adk-docs/blob/main/docs/observability/arize-ax.md): This document introduces Arize AX as a production-grade observability platform for ADK agents, offering comprehensive tracing, evaluation, and monitoring capabilities. It details the installation of required packages and the setup process for connecting an ADK application to Arize AX. The document provides a Python example demonstrating how agent interactions are automatically traced and streamed for observability and evaluation.
- [cloud-trace.md](https://github.com/gcp/adk-docs/blob/main/docs/observability/cloud-trace.md): This document explains how to enable and inspect Cloud Trace for ADK agents deployed on Google Cloud, providing centralized observability for real traffic. It details setup for Agent Engine and Cloud Run deployments, including ADK CLI and Python SDK methods. The guide illustrates how to view `invocation`, `agent_run`, `call_llm`, and `execute_tool` spans in the Cloud Trace Explorer for debugging and performance analysis.
- [logging.md](https://github.com/gcp/adk-docs/blob/main/docs/observability/logging.md): This document explains ADK's logging philosophy, which uses Python's standard `logging` module for flexible and powerful diagnostic information. It details how to configure logging using `logging.basicConfig` or the ADK CLI's `--log_level` option, emphasizing different log levels like DEBUG, INFO, WARNING, and ERROR. The document also provides guidance on reading and understanding log entries and a practical example of debugging with logs.
- [phoenix.md](https://github.com/gcp/adk-docs/blob/main/docs/observability/phoenix.md): This document introduces Phoenix as an open-source observability platform for ADK agents, offering tracing, evaluation, and debugging capabilities. It outlines the installation process for necessary packages and steps to connect an ADK application to Phoenix. The document provides a Python code example demonstrating how agent interactions are automatically traced and streamed to Phoenix for analysis.
- [weave.md](https://github.com/gcp/adk-docs/blob/main/docs/observability/weave.md): This document describes how to integrate Google ADK with Weave by WandB for logging and visualizing AI agent traces using OpenTelemetry. It outlines prerequisites like obtaining WandB API keys and installing necessary Python packages. The guide provides a Python example for configuring the OTLP span exporter to send ADK traces to the Weave dashboard, enabling timeline views of agent execution, LLM calls, and tool invocations.

## Docs Plugins

- [index.md](https://github.com/gcp/adk-docs/blob/main/docs/plugins/index.md): This document introduces Plugins in ADK as custom code modules executed at various stages of an agent workflow using callback hooks. It explains that Plugins are registered globally on the `Runner` and apply universally to all agents, models, and tools, offering a solution for cross-cutting concerns like logging, policy enforcement, and caching. The document details how to define and register Plugin classes, and outlines various callback hooks available for user messages, runner start/end, agent execution, model interactions, and tool executions.

## Docs Runtime

- [index.md](https://github.com/gcp/adk-docs/blob/main/docs/runtime/index.md): This document explains the ADK Runtime as the engine orchestrating agent applications, tools, and callbacks in response to user input. It details the core concept of the Event Loop, describing the roles of the `Runner` and Execution Logic Components (Agents, Tools, Callbacks) in a cooperative yield/pause/resume cycle. The document also covers key components like `Event` objects, `Services` (Session, Artifact, Memory), `Session`, and `Invocation`, and discusses important runtime behaviors like state updates and streaming output.
- [runconfig.md](https://github.com/gcp/adk-docs/blob/main/docs/runtime/runconfig.md): This document describes `RunConfig`, a class in ADK that defines runtime behavior and options for agents, including speech, streaming, function calling, and LLM call limits. It details the class definition for both Python and Java, outlining various runtime parameters and their functionalities. The document also provides examples for basic, streaming, speech-enabled, and compositional function calling configurations.

## Docs Safety

- [index.md](https://github.com/gcp/adk-docs/blob/main/docs/safety/index.md): This document outlines comprehensive safety and security measures for AI agents within Google Cloud Vertex AI and ADK. It identifies risk sources like ambiguous instructions and prompt injections, and categorizes risks such as misalignment, harmful content, and unsafe actions. Best practices include identity and authorization, in-tool guardrails, built-in Gemini safety features, callbacks, plugins, sandboxed code execution, evaluation, and network controls.

## Docs Sessions

- [express-mode.md](https://github.com/gcp/adk-docs/blob/main/docs/sessions/express-mode.md): This document explains how to use Vertex AI Express Mode to access `VertexAiSessionService` and `VertexAiMemoryBankService` for free within ADK. It details how to set up environment variables and create an Agent Engine to manage sessions and memories. The guide also provides code samples for initializing these services and notes their specific quotas in the free tier.
- [index.md](https://github.com/gcp/adk-docs/blob/main/docs/sessions/index.md): This document introduces the core concepts of conversational context in the Agent Development Kit (ADK): Session, State, and Memory. It explains that `Session` represents a single conversation thread with its history and temporary `State`, while `Memory` provides searchable, long-term knowledge across multiple sessions. The document highlights the roles of `SessionService` and `MemoryService` in managing these concepts, with in-memory and persistent implementations available.
- [memory.md](https://github.com/gcp/adk-docs/blob/main/docs/sessions/memory.md): This document explains the `MemoryService` in ADK, which provides long-term knowledge storage for agents beyond individual sessions. It details the two main responsibilities of `MemoryService`: ingesting information from sessions and searching for relevant context. The document compares `InMemoryMemoryService` for prototyping with `VertexAiMemoryBankService` for persistent, advanced memory capabilities, including prerequisites and configuration for each.
- [session.md](https://github.com/gcp/adk-docs/blob/main/docs/sessions/session.md): This document introduces the `Session` object in ADK, which tracks individual conversation threads, including unique identification, history (`events`), and temporary state (`state`). It explains how `SessionService` manages the lifecycle of these sessions, from creation to deletion. Different `SessionService` implementations are detailed, including `InMemorySessionService` for temporary storage, `VertexAiSessionService` for scalable persistence, and `DatabaseSessionService` for relational databases.
- [state.md](https://github.com/gcp/adk-docs/blob/main/docs/sessions/state.md): This document explains the `session.state` attribute in ADK, which acts as a temporary scratchpad for agents within a conversation thread. It details the structure of state as serializable key-value pairs, its mutability, and its persistence depending on the `SessionService` implementation. The guide also covers organizing state with prefixes (`user:`, `app:`, `temp:`) for scope management and accessing/updating state within agent instructions and callbacks.

## Docs Streaming

- [configuration.md](https://github.com/gcp/adk-docs/blob/main/docs/streaming/configuration.md): This document explains how to configure streaming behavior for live agents in ADK using the `RunConfig` class. It details parameters such as `speech_config` for voice synthesis, `response_modalities` for output types, and `max_llm_calls` for limiting LLM interactions. The document provides Python and Java examples for basic, streaming, and speech-enabled configurations.
- [custom-streaming-ws.md](https://github.com/gcp/adk-docs/blob/main/docs/streaming/custom-streaming-ws.md): This document overviews a custom asynchronous web application built with ADK Streaming and FastAPI, enabling real-time, bidirectional audio and text communication via WebSockets. It details the server-side setup, including ADK streaming components like `LiveRequestQueue` and `RunConfig`, and the client-side JavaScript for managing WebSocket connections and audio processing. The guide also provides troubleshooting tips and discusses production considerations for deploying such streaming applications.
- [custom-streaming.md](https://github.com/gcp/adk-docs/blob/main/docs/streaming/custom-streaming.md): This document outlines the server and client code for a custom asynchronous web app using ADK Streaming and FastAPI, enabling real-time, bidirectional audio and text communication via Server-Sent Events (SSE). It details the setup, agent definition, and interaction with the streaming app, including text and voice modes. The guide also covers server-side components like Agent Session Management and SSE streaming, along with client-side JavaScript for handling messages and audio.
- [part1.md](https://github.com/gcp/adk-docs/blob/main/docs/streaming/dev-guide/part1.md): This document introduces bidirectional streaming in ADK, emphasizing its ability to enable real-time, two-way communication with interruption support for AI agents. It differentiates bidi-streaming from other streaming types and highlights its applications in customer service, field service, healthcare, and financial management. The guide also provides step-by-step instructions for setting up the development environment, including virtual environment creation, ADK installation, and API key configuration.
- [index.md](https://github.com/gcp/adk-docs/blob/main/docs/streaming/index.md): This document introduces bidi-streaming (live) in ADK, an experimental feature currently available in Python, which enables low-latency bidirectional voice and video interaction using Gemini Live API. It differentiates bidi-streaming from token-level streaming and highlights its applications in human-like conversations and multimodal interactions. The page provides quickstarts, custom app samples, development guides, and a blog post for further learning.
- [streaming-tools.md](https://github.com/gcp/adk-docs/blob/main/docs/streaming/streaming-tools.md): This document introduces streaming tools in ADK, which allow functions to stream intermediate results back to agents, enabling real-time reactions. It specifies that streaming tools must be asynchronous Python functions returning an `AsyncGenerator`. The document provides examples for monitoring stock prices and video streams, and explains the `stop_streaming` function for managing these tools.

## Docs Tools

- [authentication.md](https://github.com/gcp/adk-docs/blob/main/docs/tools/authentication.md): This document explains how to authenticate tools in ADK for accessing protected resources, outlining core concepts like `AuthScheme` and `AuthCredential`. It details supported credential types and how to configure authentication for various toolsets, including OpenAPI-based and Google API tools. The document also provides a step-by-step guide for handling interactive OAuth/OIDC flows client-side and implementing authentication logic within custom `FunctionTool`s.
- [built-in-tools.md](https://github.com/gcp/adk-docs/blob/main/docs/tools/built-in-tools.md): This document describes ADK's built-in tools like Google Search and Code Execution, which provide agents with common functionalities. It explains how to import, configure, and register these tools with an agent, and details specific tools such as GKE Code Executor, Vertex AI RAG Engine, Vertex AI Search, and BigQuery tools. The document also highlights limitations, including support for only one built-in tool per agent and no use within sub-agents.
- [confirmation.md](https://github.com/gcp/adk-docs/blob/main/docs/tools/confirmation.md): This document introduces the experimental Tool Confirmation feature in ADK, allowing tools to pause execution for human or system confirmation. It details two methods: boolean confirmation for simple yes/no responses and advanced confirmation for structured data. The guide explains how to configure tools for confirmation, handle remote responses via REST API, and notes current limitations regarding `DatabaseSessionService` and `VertexAiSessionService`.
- [function-tools.md](https://github.com/gcp/adk-docs/blob/main/docs/tools/function-tools.md): This document describes how to create custom function tools in ADK, including standard Function Tools, Long Running Function Tools, and Agents-as-a-Tool. It details how the framework uses function signatures and docstrings to generate tool schemas for LLMs, and provides best practices for defining effective tool functions. The document also explains how to manage data flow between tools using session state and how Agent-as-a-Tool enables delegation.
- [google-cloud-tools.md](https://github.com/gcp/adk-docs/blob/main/docs/tools/google-cloud-tools.md): This document describes how ADK integrates with Google Cloud products and services through specialized tools like Apigee API Hub Tools and Application Integration Tools. It provides step-by-step instructions for creating and configuring these toolsets, including authentication setup and project structure. The document also introduces MCP Toolbox for Databases, enabling agents to interact with various databases securely.
- [index.md](https://github.com/gcp/adk-docs/blob/main/docs/tools/index.md): This document introduces the concept of Tools in ADK, which extend an AI agent's capabilities beyond text generation to interact with the external world. It explains how agents use tools through reasoning, selection, invocation, and observation, and categorizes tool types into Function Tools, Built-in Tools, and Third-Party Tools. The document also covers referencing tools in agent instructions and accessing contextual information via `ToolContext`.
- [mcp-tools.md](https://github.com/gcp/adk-docs/blob/main/docs/tools/mcp-tools.md): This guide covers two ways of integrating Model Context Protocol (MCP) with ADK: using ADK as an MCP client and exposing ADK tools via an MCP server. It explains the `MCPToolset` class for connecting to MCP servers and details how to build a custom MCP server to wrap ADK tools. The document also introduces the MCP Toolbox for Databases and FastMCP for exposing tools.
- [openapi-tools.md](https://github.com/gcp/adk-docs/blob/main/docs/tools/openapi-tools.md): This document explains how ADK integrates with external REST APIs using OpenAPI Specification (v3.x) to automatically generate callable tools. It details the roles of `OpenAPIToolset` and `RestApiTool` in parsing specs, discovering operations, and generating tools with schema and execution capabilities. The guide provides a workflow for integrating OpenAPI specs into agents, including authentication configuration, and offers an example using a Pet Store API.
- [performance.md](https://github.com/gcp/adk-docs/blob/main/docs/tools/performance.md): This document explains how ADK (version 1.10.0+) enhances tool performance through parallel execution of agent-requested function tools. It highlights scenarios where parallelization is beneficial and emphasizes the need for tools to be built with asynchronous execution support using `async def` and `await`. The guide provides code examples for asynchronous HTTP and database calls, and strategies for long-running operations like yielding and thread pools.
- [third-party-tools.md](https://github.com/gcp/adk-docs/blob/main/docs/tools/third-party-tools.md): This document explains how ADK integrates with third-party AI Agent frameworks like LangChain and CrewAI, allowing seamless reuse of existing tools. It provides examples for using `LangchainTool` with Tavily for web search and `CrewaiTool` with Serper API for news searches. The guide details installation of dependencies, instantiation, and wrapping of third-party tools for use within ADK agents.

## Docs Tutorials

- [agent-team.md](https://github.com/gcp/adk-docs/blob/main/docs/tutorials/agent-team.md): This tutorial guides users through building a multi-agent weather bot using ADK, progressively adding features like multi-LLM support, specialized sub-agents, and delegation. It covers defining tools, utilizing session state for memory, and implementing safety guardrails with callbacks. The tutorial aims to teach core ADK concepts for building complex, real-world agentic applications.
- [index.md](https://github.com/gcp/adk-docs/blob/main/docs/tutorials/index.md): This document serves as an index for ADK tutorials, offering practical, step-by-step guides to various features and capabilities. The tutorials are designed for incremental learning, covering foundational concepts to advanced agent development techniques. It currently features a tutorial on building an intelligent multi-agent weather bot, focusing on tools, LLMs, delegation, session state, and callbacks.

