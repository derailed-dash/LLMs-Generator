# adk-docs Sitemap

The Agent Development Kit (ADK) is an open-source, code-first framework designed for building, evaluating, and deploying sophisticated AI agents. It offers a flexible and modular approach, supporting both Python and Java, and is optimized for Google's Gemini models while remaining model-agnostic. ADK facilitates the creation of agents ranging from simple task handlers to complex multi-agent systems, providing core components like LLM Agents for reasoning, Workflow Agents for deterministic control flow (sequential, parallel, loop), and Custom Agents for unique orchestration logic. Key features include a rich ecosystem of built-in, custom, and third-party tools, robust session and memory management for conversational context, and comprehensive API references for developers. It also supports advanced capabilities such as Agent2Agent (A2A) Protocol for inter-agent communication, multimodal streaming for real-time interactions, and integrated developer tooling for local testing and debugging. ADK emphasizes safety and security through guardrails, sandboxed code execution, and observability features like logging and integration with platforms like AgentOps, Arize AX, Cloud Trace, Phoenix, and Weave. The documentation provides detailed guides on installation, quickstarts, tutorials, and deployment options to Google Cloud services like Vertex AI Agent Engine, Cloud Run, and GKE. This ensures developers can effectively build, manage, evaluate, and scale AI-powered applications with confidence and control.

## Home

- [CONTRIBUTING.md](https://github.com/gcp/adk-docs/blob/main/CONTRIBUTING.md): Provides guidelines for contributing to the project, including signing a Contributor License Agreement and reviewing community guidelines. Details the contribution workflow, from finding tasks to development setup and code review processes via GitHub Pull Requests. Emphasizes the importance of clear communication and adherence to project standards.
- [README.md](https://github.com/gcp/adk-docs/blob/main/README.md): Introduces the Agent Development Kit (ADK) as an open-source, code-first toolkit for building, evaluating, and deploying sophisticated AI agents. Highlights key features such as a rich tool ecosystem, modular multi-agent systems, tracing, monitoring, and flexible deployment options. Provides installation instructions for Python and Java, and links to comprehensive documentation and contributing guidelines.

## Docs

- [community.md](https://github.com/gcp/adk-docs/blob/main/docs/community.md): Highlights community-maintained resources for the Agent Development Kit (ADK), including translations of documentation into Chinese, Korean, and Japanese. Lists tutorials, guides, blog posts, and videos covering ADK features, use cases, and integrations. Encourages contributions from the community and provides guidance on sharing resources.
- [contributing-guide.md](https://github.com/gcp/adk-docs/blob/main/docs/contributing-guide.md): Provides a comprehensive guide for contributing to the Agent Development Kit (ADK), covering its Python and Java core libraries, documentation, and web UI. Outlines prerequisites like signing a Contributor License Agreement and reviewing community guidelines. Details various contribution methods, including reporting issues, suggesting enhancements, improving documentation, and writing code, emphasizing the GitHub Pull Request review process.
- [index.md](https://github.com/gcp/adk-docs/blob/main/docs/index.md): Introduces the Agent Development Kit (ADK) as a flexible and modular framework for developing and deploying AI agents, optimized for Gemini but model-agnostic. Highlights key features including flexible orchestration, multi-agent architecture, rich tool ecosystem, deployment readiness, built-in evaluation, and safety. Provides installation snippets for Python and Java, along with links to quickstarts, tutorials, API reference, and contribution guides.

## Docs A2A

- [index.md](https://github.com/gcp/adk-docs/blob/main/docs/a2a/index.md): Guides users on building multi-agent systems using the Agent2Agent (A2A) Protocol within the Agent Development Kit (ADK). Provides an introduction to A2A fundamentals and quickstarts for both exposing and consuming remote agents. Links to the official A2A Protocol website for further details.
- [intro.md](https://github.com/gcp/adk-docs/blob/main/docs/a2a/intro.md): Explains the Agent2Agent (A2A) Protocol for inter-agent communication, differentiating it from local sub-agents. Details when to use A2A for integrating with external services, different teams, or diverse programming languages, versus using local sub-agents for internal code organization and performance. Illustrates the A2A workflow through diagrams showing exposing and consuming agents, and provides a concrete customer service use case.
- [quickstart-consuming.md](https://github.com/gcp/adk-docs/blob/main/docs/a2a/quickstart-consuming.md): Provides a quickstart guide for an ADK agent to consume a remote agent via the Agent-to-Agent (A2A) Protocol. Demonstrates building a multi-agent system where a local root agent delegates tasks to a local roll agent and a remote prime agent. Details steps for setting up the remote A2A server, understanding agent cards, and running the main consuming agent with example interactions.
- [quickstart-exposing.md](https://github.com/gcp/adk-docs/blob/main/docs/a2a/quickstart-exposing.md): Guides developers on exposing an ADK agent via the Agent-to-Agent (A2A) Protocol for consumption by other agents. Explains two methods: using the `to_a2a()` function for auto-generation of agent cards and exposure via `uvicorn`, or manually creating agent cards for `adk api_server --a2a`. Provides a sample code walkthrough for exposing a Hello World agent and interacting with it remotely.

## Docs Agents

- [config.md](https://github.com/gcp/adk-docs/blob/main/docs/agents/config.md): Introduces the experimental Agent Config feature, allowing users to build and run ADK agents using YAML files without writing code. Explains how to set up the environment, create agent projects using `adk create --type=config`, and configure Gemini models via environment variables. Demonstrates running agents with web UI, command line, or API server modes, and provides examples for built-in, custom, and sub-agent configurations.
- [custom-agents.md](https://github.com/gcp/adk-docs/blob/main/docs/agents/custom-agents.md): Explains how to create custom agents in ADK by directly inheriting from `BaseAgent` and implementing `_run_async_impl` for arbitrary orchestration logic. Highlights use cases like conditional logic, complex state management, and dynamic agent selection that go beyond predefined workflow agents. Provides detailed Python and Java examples demonstrating the implementation of a `StoryFlowAgent` with iterative refinement and conditional regeneration.
- [index.md](https://github.com/gcp/adk-docs/blob/main/docs/agents/index.md): Defines an Agent in ADK as a self-contained execution unit for achieving specific goals, built upon the `BaseAgent` class. Categorizes agents into LLM Agents for reasoning, Workflow Agents for deterministic flow control, and Custom Agents for unique logic. Provides a comparison table and explains how combining these agent types enables sophisticated multi-agent systems.
- [llm-agents.md](https://github.com/gcp/adk-docs/blob/main/docs/agents/llm-agents.md): Details the `LlmAgent` as a core ADK component powered by Large Language Models for reasoning, natural language understanding, and tool interaction. Explains how to define an agent's identity using `name`, `description`, and `model`, and guide its behavior with `instruction` and `tools`. Covers advanced configurations like `generate_content_config`, `input_schema`, `output_schema`, `output_key`, `include_contents`, and `planner` for fine-tuning LLM behavior and data exchange.
- [models.md](https://github.com/gcp/adk-docs/blob/main/docs/agents/models.md): Explains how to integrate various Large Language Models (LLMs) with the Agent Development Kit (ADK), emphasizing its model-agnostic design. Covers using Google Gemini models via AI Studio or Vertex AI, integrating Anthropic's Claude models directly or through Vertex AI, and leveraging LiteLLM for a wide range of cloud and local open models like Ollama. Provides detailed authentication methods and configuration examples for each model type in both Python and Java.
- [multi-agents.md](https://github.com/gcp/adk-docs/blob/main/docs/agents/multi-agents.md): Discusses building multi-agent systems in ADK by composing multiple `BaseAgent` instances for modularity, specialization, and reusability. Explains core primitives like agent hierarchy (parent/sub-agents), workflow agents (Sequential, Parallel, Loop) as orchestrators, and communication mechanisms like shared session state and LLM-driven delegation. Illustrates common multi-agent patterns including Coordinator/Dispatcher, Sequential Pipeline, Parallel Fan-Out/Gather, Hierarchical Task Decomposition, Review/Critique, and Human-in-the-Loop.
- [index.md](https://github.com/gcp/adk-docs/blob/main/docs/agents/workflow-agents/index.md): Introduces workflow agents in ADK as specialized components for orchestrating the execution flow of sub-agents based on predefined logic. Highlights three core types: Sequential Agents for ordered execution, Loop Agents for iterative processes, and Parallel Agents for concurrent tasks. Emphasizes their role in providing predictability, reliability, and structure to complex processes, allowing combination with LLM-powered sub-agents.
- [loop-agents.md](https://github.com/gcp/adk-docs/blob/main/docs/agents/workflow-agents/loop-agents.md): Describes the `LoopAgent` in ADK as a workflow agent that iteratively executes its sub-agents for a specified number of times or until a termination condition is met. Explains its use for repetitive tasks like iterative refinement, providing an example of an image generation task. Details its deterministic execution and the importance of implementing termination mechanisms like `max_iterations` or sub-agent escalation.
- [parallel-agents.md](https://github.com/gcp/adk-docs/blob/main/docs/agents/workflow-agents/parallel-agents.md): Explains the `ParallelAgent` in ADK, a workflow agent that executes its sub-agents concurrently to speed up independent tasks. Highlights its use for scenarios prioritizing speed, such as multi-source data retrieval or heavy computations, where sub-agents operate without dependencies. Details its independent execution model and the need for explicit communication or external state management if data sharing is required between parallel branches.
- [sequential-agents.md](https://github.com/gcp/adk-docs/blob/main/docs/agents/workflow-agents/sequential-agents.md): Describes the `SequentialAgent` in ADK as a workflow agent that executes its sub-agents in a fixed, strict order. Emphasizes its use for workflows requiring a predefined sequence, like a code development pipeline where output from one step feeds into the next. Explains that it's deterministic and passes the same `InvocationContext` to sub-agents, enabling data sharing via session state.

## Docs Api-Reference

- [index.md](https://github.com/gcp/adk-docs/blob/main/docs/api-reference/index.md): Provides an overview of the API references available for the Agent Development Kit (ADK) in both Python and Java. Includes links to detailed documentation for Python API, Java API (Javadoc), Command Line Interface (CLI), Agent Config YAML reference, and the REST API for the ADK web server. This serves as a central hub for developers seeking in-depth technical specifications.
- [dejavufonts.md](https://github.com/gcp/adk-docs/blob/main/docs/api-reference/java/legal/dejavufonts.md): Details the licensing information for DejaVu fonts version 2.37, covering the Bitstream Vera Fonts copyright and public domain DejaVu changes. Includes licensing for glyphs imported from Arev fonts and TeX Gyre DJV Math extensions. Specifies conditions for use, modification, and distribution, and disclaims warranties.
- [jquery.md](https://github.com/gcp/adk-docs/blob/main/docs/api-reference/java/legal/jquery.md): Presents the jQuery v3.7.1 license, granting permission to use, copy, modify, and distribute the software without restriction. Includes the full text of the MIT License. Disclaims warranties and limits liability for the software.
- [jqueryUI.md](https://github.com/gcp/adk-docs/blob/main/docs/api-reference/java/legal/jqueryUI.md): Outlines the jQuery UI v1.13.2 license, permitting free use, modification, and distribution of the software. Specifies that sample code in the demos directory is waived via CC0. Notes that files in `node_modules` and external directories have their own licenses.
- [index.md](https://github.com/gcp/adk-docs/blob/main/docs/api-reference/rest/index.md): Provides a reference for the REST API exposed by the ADK web server, useful for programmatic testing. Details the `/run` and `/run_sse` endpoints for executing agent runs, including request and response body structures for `Content` and `Event` objects. Mentions that an updated API reference is available on a running ADK web server at `/docs`.

## Docs Artifacts

- [index.md](https://github.com/gcp/adk-docs/blob/main/docs/artifacts/index.md): Explains Artifacts in ADK as a mechanism for managing named, versioned binary data associated with sessions or users. Describes artifacts as `google.genai.types.Part` objects with `inline_data` (raw bytes and MIME type), managed by a `BaseArtifactService`. Highlights use cases for non-textual data, large data persistence, user uploads, and caching binary results.

## Docs Callbacks

- [design-patterns-and-best-practices.md](https://github.com/gcp/adk-docs/blob/main/docs/callbacks/design-patterns-and-best-practices.md): Outlines design patterns and best practices for using callbacks in ADK to enhance and control agent behavior. Covers patterns like guardrails, dynamic state management, logging, caching, request/response modification, conditional skipping, tool-specific actions, and artifact handling. Emphasizes principles like focus, performance, error handling, state management, and thorough testing.
- [index.md](https://github.com/gcp/adk-docs/blob/main/docs/callbacks/index.md): Introduces callbacks as a core ADK feature for observing, customizing, and controlling agent behavior at specific execution points. Explains their purpose in debugging, implementing guardrails, managing state, and integrating external actions. Describes the mechanism of interception and control through return values, distinguishing between allowing default behavior and overriding it with specific objects.
- [types-of-callbacks.md](https://github.com/gcp/adk-docs/blob/main/docs/callbacks/types-of-callbacks.md): Details the different types of callbacks available in ADK, categorized by their trigger points in an agent's execution lifecycle. Covers agent lifecycle callbacks (`before_agent_callback`, `after_agent_callback`), LLM interaction callbacks (`before_model_callback`, `after_model_callback`), and tool execution callbacks (`before_tool_callback`, `after_tool_callback`). Explains the purpose and return value effects of each callback for inspecting, modifying, or skipping actions.

## Docs Context

- [index.md](https://github.com/gcp/adk-docs/blob/main/docs/context/index.md): Explains "context" in ADK as the bundle of information available to agents and tools during operations, essential for maintaining state and passing data. Details different context objects: `InvocationContext` for comprehensive internal access, `ReadonlyContext` for safe read-only views, `CallbackContext` for callbacks, and `ToolContext` for tool functions. Demonstrates common tasks like accessing information, managing state, working with artifacts, and handling tool authentication using these context objects.

## Docs Deploy

- [agent-engine.md](https://github.com/gcp/adk-docs/blob/main/docs/deploy/agent-engine.md): Guides on deploying ADK agents to Vertex AI Agent Engine, a fully managed Google Cloud service for scaling AI agents in production. Offers an accelerated deployment path using the Agent Starter Pack CLI for quick setup and a standard step-by-step guide for manual configuration. Covers prerequisites, agent preparation, connection to Google Cloud, deployment commands, and testing the deployed agent.
- [cloud-run.md](https://github.com/gcp/adk-docs/blob/main/docs/deploy/cloud-run.md): Provides instructions for deploying ADK agents to Google Cloud Run, a fully managed platform for containerized applications. Details agent sample requirements for Python and Java, environment variable setup, and deployment payload contents. Explains deployment using `adk deploy cloud_run` (recommended for Python) or `gcloud run deploy` with Dockerfiles, and covers testing deployed agents via UI or API.
- [gke.md](https://github.com/gcp/adk-docs/blob/main/docs/deploy/gke.md): Guides on deploying ADK agents to Google Kubernetes Engine (GKE), Google Cloud's managed Kubernetes service. Covers environment setup, API and permission requirements, and the deployment payload. Offers two deployment options: manual deployment using `gcloud` and `kubectl` with Kubernetes manifests, or automated deployment using the `adk deploy gke` command. Includes instructions for building container images, configuring Kubernetes service accounts, and testing deployed agents.
- [index.md](https://github.com/gcp/adk-docs/blob/main/docs/deploy/index.md): Provides an overview of deployment options for ADK agents, moving them from local development to scalable and reliable environments. Discusses deploying to Vertex AI Agent Engine for managed scaling, Cloud Run for container-based applications, and Google Kubernetes Engine (GKE) for more control and open models. Mentions the possibility of packaging agents into container images for other container-friendly infrastructures.

## Docs Evaluate

- [index.md](https://github.com/gcp/adk-docs/blob/main/docs/evaluate/index.md): Explains the importance of evaluating AI agents due to their inherent variability, contrasting it with traditional deterministic software testing. Details how to prepare for evaluations by defining objectives and metrics, focusing on both trajectory/tool use and final response quality. Describes ADK's evaluation methods: using test files for unit testing, evalsets for integration tests, and running evaluations via web UI, `pytest`, or CLI.

## Docs Events

- [index.md](https://github.com/gcp/adk-docs/blob/main/docs/events/index.md): Defines Events as fundamental, immutable units of information flow in ADK, representing every significant occurrence during an agent's interaction lifecycle. Explains their role in communication, signaling state/artifact changes, controlling flow, and providing history/observability. Details how to understand and use events by identifying origin, type, extracting information, detecting actions, and determining final responses.

## Docs Get-Started

- [about.md](https://github.com/gcp/adk-docs/blob/main/docs/get-started/about.md): No summary
- [index.md](https://github.com/gcp/adk-docs/blob/main/docs/get-started/index.md): No summary
- [installation.md](https://github.com/gcp/adk-docs/blob/main/docs/get-started/installation.md): No summary
- [quickstart.md](https://github.com/gcp/adk-docs/blob/main/docs/get-started/quickstart.md): No summary
- [index.md](https://github.com/gcp/adk-docs/blob/main/docs/get-started/streaming/index.md): No summary
- [quickstart-streaming-java.md](https://github.com/gcp/adk-docs/blob/main/docs/get-started/streaming/quickstart-streaming-java.md): No summary
- [quickstart-streaming.md](https://github.com/gcp/adk-docs/blob/main/docs/get-started/streaming/quickstart-streaming.md): No summary
- [testing.md](https://github.com/gcp/adk-docs/blob/main/docs/get-started/testing.md): No summary

## Docs Grounding

- [google_search_grounding.md](https://github.com/gcp/adk-docs/blob/main/docs/grounding/google_search_grounding.md): Explains Google Search Grounding in ADK, enabling AI agents to access real-time web information for accurate, up-to-date responses. Provides a quickstart guide for setting up a Google Search-enabled agent, detailing environment setup, agent project creation, and authentication for Gemini models. Describes the data flow, response structure with grounding metadata, and best practices for displaying search results and citations.
- [vertex_ai_search_grounding.md](https://github.com/gcp/adk-docs/blob/main/docs/grounding/vertex_ai_search_grounding.md): Explains Vertex AI Search Grounding in ADK, enabling AI agents to access private enterprise documents and data repositories for grounded responses. Provides a quickstart for setting up a Vertex AI Search-enabled agent, covering data store preparation, environment setup, and Google Cloud authentication. Details the data flow, response structure with grounding metadata (chunks, supports, retrieval queries), and best practices for displaying citations and document references.

## Docs Mcp

- [index.md](https://github.com/gcp/adk-docs/blob/main/docs/mcp/index.md): Introduces the Model Context Protocol (MCP) as an open standard for LLMs to communicate with external applications, data sources, and tools. Explains how MCP works through a client-server architecture, defining data, interactive templates, and actionable functions. Details ADK's support for using and exposing MCP tools, including integration with MCP Toolbox for Databases and FastMCP servers.

## Docs Observability

- [agentops.md](https://github.com/gcp/adk-docs/blob/main/docs/observability/agentops.md): Describes integrating AgentOps with Google ADK for comprehensive agent observability, tracing, and monitoring with minimal code. Highlights AgentOps' capabilities including session replays, metrics, rich visualization, detailed debugging, and LLM cost/latency tracking. Explains how AgentOps neutralizes ADK's native telemetry and controls span creation for agent execution, LLM interactions, and tool usage.
- [arize-ax.md](https://github.com/gcp/adk-docs/blob/main/docs/observability/arize-ax.md): Details agent observability with Arize AX, a production-grade platform for monitoring, debugging, and improving LLM applications and AI Agents. Explains how Arize AX automatically collects traces from Google ADK using OpenInference instrumentation. Covers capabilities such as tracing agent interactions, evaluating performance, monitoring in production, and debugging issues with detailed traces.
- [cloud-trace.md](https://github.com/gcp/adk-docs/blob/main/docs/observability/cloud-trace.md): Explains how to use Google Cloud Trace for agent observability within ADK applications, especially for cloud deployments. Details its OpenTelemetry-based tracing for monitoring, debugging, and improving performance by analyzing request flows and identifying bottlenecks. Provides setup instructions for Agent Engine and Cloud Run deployments, as well as customized setups, and guides on inspecting traces in the Cloud Trace Explorer.
- [logging.md](https://github.com/gcp/adk-docs/blob/main/docs/observability/logging.md): Explains ADK's logging capabilities using Python's standard `logging` module, emphasizing its flexibility for monitoring and debugging. Details how to configure logging levels (DEBUG, INFO, WARNING, ERROR, CRITICAL) programmatically or via ADK CLI's `--log_level` option. Provides guidance on interpreting log messages, including hierarchical logger names and a practical example for debugging LLM prompts.
- [phoenix.md](https://github.com/gcp/adk-docs/blob/main/docs/observability/phoenix.md): Describes agent observability with Phoenix, an open-source, self-hosted platform for monitoring and debugging LLM applications and AI Agents. Explains how Phoenix automatically collects traces from Google ADK using OpenInference instrumentation. Covers capabilities such as tracing agent interactions, evaluating performance, and debugging issues, while allowing data to remain on local infrastructure.
- [weave.md](https://github.com/gcp/adk-docs/blob/main/docs/observability/weave.md): Explains how to integrate Google ADK with Weave by Weights & Biases for logging and visualizing model calls using OpenTelemetry traces. Provides prerequisites including WandB API key setup and installation of necessary Python packages. Details the configuration for sending traces to Weave and how to view them in the Weave dashboard, including timeline views.

## Docs Plugins

- [index.md](https://github.com/gcp/adk-docs/blob/main/docs/plugins/index.md): Introduces Plugins in ADK as custom code modules executed at various stages of an agent workflow lifecycle using callback hooks. Highlights typical applications like logging, policy enforcement, monitoring, response caching, and request/response modification. Explains that plugins apply globally to every agent, tool, and LLM call managed by a runner, offering greater modularity and flexibility than individual callbacks for cross-cutting concerns.

## Docs Runtime

- [index.md](https://github.com/gcp/adk-docs/blob/main/docs/runtime/index.md): Explains the ADK Runtime as the underlying engine powering agent applications, orchestrating execution in response to user input. Details the core Event Loop mechanism, where the `Runner` coordinates with "Execution Logic" components (Agents, Tools, Callbacks) via `Event` objects. Describes the roles of the `Runner`, Execution Logic, `Event` objects, `Services`, `Session`, and `Invocation` in this continuous cycle.
- [runconfig.md](https://github.com/gcp/adk-docs/blob/main/docs/runtime/runconfig.md): Details `RunConfig` as a class defining runtime behavior and options for ADK agents, including speech and streaming settings, function calling, artifact saving, and LLM call limits. Explains its parameters like `speech_config`, `response_modalities`, `save_input_blobs_as_artifacts`, `streaming_mode`, `output_audio_transcription`, and `max_llm_calls`. Provides examples for basic, streaming, and speech-enabled configurations.

## Docs Safety

- [index.md](https://github.com/gcp/adk-docs/blob/main/docs/safety/index.md): Discusses safety and security for AI agents, emphasizing the mitigation of risks like misaligned actions and inappropriate content. Outlines Google Cloud Vertex AI's multi-layered approach, including identity/authorization, in-tool guardrails, Gemini safety features, callbacks/plugins, sandboxed code execution, evaluation, and network controls. Details sources and categories of risk, and best practices for implementing robust safety measures.

## Docs Sessions

- [express-mode.md](https://github.com/gcp/adk-docs/blob/main/docs/sessions/express-mode.md): Explains how to use Vertex AI Express Mode to access `VertexAiSessionService` and `VertexAiMemoryBankService` for free, even without a Google Cloud Project. Details the process of creating an Agent Engine and managing sessions and memories with Express Mode API keys. Highlights limitations of the free tier and provides a code sample for a weather agent utilizing these services.
- [index.md](https://github.com/gcp/adk-docs/blob/main/docs/sessions/index.md): Introduces core concepts of conversational context in ADK: `Session`, `State`, and `Memory`. Explains `Session` as a single interaction thread, `State` as data within the current conversation, and `Memory` as searchable, cross-session long-term knowledge. Describes `SessionService` and `MemoryService` for managing these, noting in-memory implementations for testing and persistent options for production.
- [memory.md](https://github.com/gcp/adk-docs/blob/main/docs/sessions/memory.md): Explains ADK's `MemoryService` for managing long-term, searchable knowledge beyond a single conversation session. Differentiates `Memory` from `Session`/`State` by its cross-session scope and ability to integrate external data. Compares `InMemoryMemoryService` for prototyping with `VertexAiMemoryBankService` for persistent, sophisticated memory, detailing their mechanisms, prerequisites, and configuration.
- [session.md](https://github.com/gcp/adk-docs/blob/main/docs/sessions/session.md): Details the `Session` object in ADK as the container for tracking individual conversation threads. Describes its key properties: `id`, `appName`, `userId` for identification, `events` for chronological interaction history, `state` for temporary data, and `lastUpdateTime` for activity tracking. Explains the role of `SessionService` in managing the session lifecycle (creating, resuming, saving, deleting) and introduces `InMemorySessionService` and `VertexAiSessionService` implementations.
- [state.md](https://github.com/gcp/adk-docs/blob/main/docs/sessions/state.md): Describes `session.state` as a dedicated scratchpad within each ADK `Session` for storing and updating dynamic details during a conversation. Explains its characteristics as serializable key-value pairs, its mutability, and its persistence depending on the `SessionService`. Details organizing state with prefixes (`user:`, `app:`, `temp:`) for scoping, accessing state in agent instructions via templating, and recommended methods for state updates through `output_key`, `EventActions.state_delta`, and `CallbackContext`/`ToolContext`.

## Docs Streaming

- [configuration.md](https://github.com/gcp/adk-docs/blob/main/docs/streaming/configuration.md): Explains how to configure streaming behavior for live agents in ADK using `RunConfig`. Highlights parameters like `speech_config` for voice settings and `response_modalities`. Provides a Python example of setting `voice_config` within `RunConfig` for a `runner.run_live()` call.
- [custom-streaming-ws.md](https://github.com/gcp/adk-docs/blob/main/docs/streaming/custom-streaming-ws.md): Overviews building a custom asynchronous web app with ADK Streaming and FastAPI using WebSockets for real-time, bidirectional audio and text communication. Details installation, platform setup (Google AI Studio or Vertex AI), and agent definition. Explains server-side components for ADK streaming setup, session management, and WebSocket handling, along with client-side JavaScript for interaction and audio processing.
- [custom-streaming.md](https://github.com/gcp/adk-docs/blob/main/docs/streaming/custom-streaming.md): Overviews building a custom asynchronous web app with ADK Streaming and FastAPI using Server-Sent Events (SSE) for real-time, bidirectional audio and text communication. Details installation, platform setup (Google AI Studio or Vertex AI), and agent definition. Explains server-side components for ADK streaming setup, session management, and SSE handling, along with client-side JavaScript for interaction and audio processing.
- [part1.md](https://github.com/gcp/adk-docs/blob/main/docs/streaming/dev-guide/part1.md): Introduces ADK Bidi-streaming, explaining it as a fundamental shift from traditional AI interactions to real-time, two-way communication with responsive interruption capabilities. Differentiates bidi-streaming from server-side and token-level streaming, highlighting its value for natural, human-like conversations and multimodal support. Provides a high-level architecture overview and setup instructions for the development environment.
- [index.md](https://github.com/gcp/adk-docs/blob/main/docs/streaming/index.md): Introduces ADK's streaming capabilities, specifically focusing on bidi-streaming (live) for low-latency bidirectional voice and video interaction using Gemini Live API. Differentiates it from token-level streaming and highlights its experimental nature in Python. Provides quickstarts for Python and Java, a custom audio streaming app sample, a development guide series, and information on streaming tools.
- [streaming-tools.md](https://github.com/gcp/adk-docs/blob/main/docs/streaming/streaming-tools.md): Explains streaming tools in ADK, which allow functions to stream intermediate results back to agents in live/streaming contexts. Requires tools to be `async` Python functions returning an `AsyncGenerator`. Differentiates between simple and video streaming tools, providing examples for monitoring stock prices and video streams, and emphasizing the `stop_streaming` function.

## Docs Tools

- [authentication.md](https://github.com/gcp/adk-docs/blob/main/docs/tools/authentication.md): Explains ADK's system for authenticating tools accessing protected resources, covering `AuthScheme` and `AuthCredential` concepts. Details supported initial credential types like API_KEY, OAuth2, and SERVICE_ACCOUNT. Guides on configuring authentication for various toolsets and handling interactive OAuth/OIDC flows client-side, emphasizing the process of detecting auth requests, redirecting users, and sending authentication results back to ADK.
- [built-in-tools.md](https://github.com/gcp/adk-docs/blob/main/docs/tools/built-in-tools.md): Introduces ADK's built-in tools, providing ready-to-use functionalities like Google Search, Code Execution, Vertex AI RAG Engine, Vertex AI Search, and BigQuery tools. Explains how to import, configure, and register these tools with an agent, noting their compatibility with Gemini 2 models. Highlights limitations such as only one built-in tool per root/single agent and no built-in tools within sub-agents.
- [confirmation.md](https://github.com/gcp/adk-docs/blob/main/docs/tools/confirmation.md): Describes ADK's experimental Tool Confirmation feature, which allows a `FunctionTool` to pause execution for human or system confirmation. Explains two methods: boolean confirmation for simple yes/no responses and advanced confirmation for structured data. Details how to define confirmation requests with `hint` and `payload`, and handle remote confirmations via the ADK API server.
- [function-tools.md](https://github.com/gcp/adk-docs/blob/main/docs/tools/function-tools.md): Explains how to create custom function tools in ADK to integrate tailored logic, connecting to proprietary databases or implementing unique algorithms. Covers three types: standard Function Tools, Long Running Function Tools for asynchronous operations, and Agents-as-a-Tool for delegation. Details defining function signatures, return types, docstrings, and best practices for creating effective tools.
- [google-cloud-tools.md](https://github.com/gcp/adk-docs/blob/main/docs/tools/google-cloud-tools.md): Details Google Cloud tools in ADK for connecting agents to Google Cloud products and services, available for Python. Covers Apigee API Hub Tools for custom APIs, Application Integration Tools for enterprise applications and workflows, and MCP Toolbox for Databases. Provides prerequisites, setup instructions, and code examples for creating toolsets and integrating them with agents, including authentication configurations.
- [index.md](https://github.com/gcp/adk-docs/blob/main/docs/tools/index.md): Defines a Tool in ADK as a specific capability enabling AI agents to interact with the world beyond their core reasoning. Highlights tools as action-oriented, extending agent capabilities, and executing predefined logic. Explains how agents use tools through reasoning, selection, invocation, observation, and finalization steps. Categorizes tool types into Function Tools, Built-in Tools, and Third-Party Tools, and provides guidance on referencing tools in agent instructions.
- [mcp-tools.md](https://github.com/gcp/adk-docs/blob/main/docs/tools/mcp-tools.md): Guides on integrating Model Context Protocol (MCP) with ADK, covering two main patterns: ADK agents acting as MCP clients and ADK tools exposed via an MCP server. Explains the `MCPToolset` for connecting to MCP servers and adapting their tools for ADK agents. Provides examples for file system and Google Maps MCP servers, and details building a custom MCP server to expose ADK tools.
- [openapi-tools.md](https://github.com/gcp/adk-docs/blob/main/docs/tools/openapi-tools.md): Explains how ADK simplifies integrating REST APIs by automatically generating callable tools from OpenAPI Specifications (v3.x). Introduces `OpenAPIToolset` as the primary class for parsing specs and generating `RestApiTool` instances for each API operation. Details the process of initialization, tool generation, and authentication, providing a usage workflow and an example with a Pet Store API.
- [performance.md](https://github.com/gcp/adk-docs/blob/main/docs/tools/performance.md): Explains how ADK version 1.10.0 and later attempts to run agent-requested function tools in parallel to improve performance and responsiveness. Emphasizes that custom tools must be built with asynchronous execution support using `async def` and `await` in Python. Provides examples for asynchronous HTTP web calls, database calls, yielding behavior for long loops, thread pools for intensive operations, and process chunking.
- [third-party-tools.md](https://github.com/gcp/adk-docs/blob/main/docs/tools/third-party-tools.md): Details how ADK allows seamless integration of tools from other AI Agent frameworks like LangChain and CrewAI, promoting extensibility and reusability. Explains using the `LangchainTool` wrapper for LangChain tools (e.g., Tavily search) and the `CrewaiTool` wrapper for CrewAI tools (e.g., Serper API). Provides step-by-step examples for installing dependencies, obtaining API keys, instantiating, wrapping, and adding these third-party tools to ADK agents.

## Docs Tutorials

- [agent-team.md](https://github.com/gcp/adk-docs/blob/main/docs/tutorials/agent-team.md): Provides a progressive tutorial on building an intelligent multi-agent weather bot team using ADK, extending from basic concepts to advanced features. Covers tool definition, multi-LLM flexibility with LiteLLM, agent delegation, session state for memory, and safety guardrails with callbacks. Aims to teach structuring interactions, managing state, ensuring safety, and orchestrating multiple AI agents.
- [index.md](https://github.com/gcp/adk-docs/blob/main/docs/tutorials/index.md): Presents a collection of ADK tutorials designed for progressive, step-by-step learning of various features and capabilities. Highlights the "Agent Team" tutorial for building an intelligent multi-agent weather bot, covering tools, multi-LLM usage, delegation, session state, and callbacks. Aims to equip users with techniques for building sophisticated agentic applications.

## Examples Java

- [README.md](https://github.com/gcp/adk-docs/blob/main/examples/java/demos/README.md): No meaningful summary available.
- [README.md](https://github.com/gcp/adk-docs/blob/main/examples/java/demos/patent-search-agent/README.md): Provides instructions for setting up and deploying a Patent Search Agent using ADK Java SDK. Covers obtaining API keys, configuring environment variables, setting up AlloyDB for patents data, creating and deploying a Cloud Run Function for AlloyDB access, and interacting with the agent. Includes steps for local execution and deployment to Cloud Run.
- [README.md](https://github.com/gcp/adk-docs/blob/main/examples/java/demos/patent-search-agent/src/main/java/tools/CloudRunFunction/README.md): Provides detailed instructions for creating database objects in AlloyDB and deploying a Cloud Run Function to access them for patent search data. Covers creating AlloyDB clusters, instances, and tables, data ingestion, granting permissions, and deploying the Cloud Run Function. Emphasizes the need for VPC connector configuration for the Cloud Function to access AlloyDB.

## Examples Python

- [agent.py](https://github.com/gcp/adk-docs/blob/main/examples/python/agent-samples/youtube-shorts-assistant/agent.py): Defines a YouTube Shorts Assistant agent using ADK, which orchestrates sub-agents for scriptwriting, visualizing, and formatting video concepts. The main agent (`youtube_shorts_agent`) uses LLM's reasoning ability and `AgentTool` to delegate tasks to specialized sub-agents. This allows for a modular workflow where each sub-agent handles a specific part of the video creation process.
- [loop_agent.py](https://github.com/gcp/adk-docs/blob/main/examples/python/agent-samples/youtube-shorts-assistant/loop_agent.py): Defines a YouTube Shorts Assistant agent using ADK's `LoopAgent` to iteratively call sub-agents for scriptwriting, visualizing, and formatting video concepts. The `LoopAgent` orchestrates the sequential execution of `ShortsScriptwriter`, `ShortsVisualizer`, and `ConceptFormatter` sub-agents. This structure enables a repetitive workflow for refining video concepts.
- [loop_agent_runner.py](https://github.com/gcp/adk-docs/blob/main/examples/python/agent-samples/youtube-shorts-assistant/loop_agent_runner.py): Demonstrates how to programmatically run a YouTube Shorts Assistant `LoopAgent` workflow using ADK. Defines sub-agents for scriptwriting, visualizing, and formatting, which are then orchestrated by a `LoopAgent`. Includes setup for `InMemorySessionService` and `Runner` to execute the agent, and provides an asynchronous function to interact with it.
- [util.py](https://github.com/gcp/adk-docs/blob/main/examples/python/agent-samples/youtube-shorts-assistant/util.py): Provides a utility function `load_instruction_from_file` to read instruction text from a file. This function handles file not found errors and other exceptions, falling back to a default instruction if necessary. It helps in externalizing agent instructions for better management and readability.
- [storyflow_agent.py](https://github.com/gcp/adk-docs/blob/main/examples/python/snippets/agents/custom-agent/storyflow_agent.py): Implements a `StoryFlowAgent` as a custom ADK agent that orchestrates a story generation and refinement workflow. It uses multiple LLM agents (story generator, critic, reviser, grammar check, tone check) within `LoopAgent` and `SequentialAgent` for conditional logic. The agent iteratively refines a story based on critique and regenerates it if the tone is negative, demonstrating complex control flow.
- [capital_agent.py](https://github.com/gcp/adk-docs/blob/main/examples/python/snippets/agents/llm-agent/capital_agent.py): Demonstrates the configuration and interaction of two `LlmAgent` instances: one using a tool (`get_capital_city`) and `output_key`, and another enforcing an `output_schema` without tools. Highlights how `LlmAgent` can be guided by `instruction` and equipped with `tools` or structured output constraints. The example compares tool-based information retrieval with LLM-generated structured responses.
- [loop_agent_doc_improv_agent.py](https://github.com/gcp/adk-docs/blob/main/examples/python/snippets/agents/workflow-agents/loop_agent_doc_improv_agent.py): Demonstrates an iterative document improvement pipeline using ADK's `LoopAgent`, orchestrating `LlmAgent`s for initial writing, critiquing, and refining. The `LoopAgent` executes `critic_agent_in_loop` and `refiner_agent_in_loop` sequentially, with a custom `exit_loop` tool allowing the process to terminate when the critique signals completion. This showcases a human-in-the-loop-like iterative refinement process.
- [parallel_agent_web_research.py](https://github.com/gcp/adk-docs/blob/main/examples/python/snippets/agents/workflow-agents/parallel_agent_web_research.py): Demonstrates a web research pipeline using ADK's `ParallelAgent` to run multiple `LlmAgent`s concurrently for information gathering. Three specialized researcher agents (Renewable Energy, Electric Vehicles, Carbon Capture) use `google_search` and store results in session state. A subsequent `SynthesisAgent` (within a `SequentialAgent`) then merges these parallel findings into a structured report, showcasing efficient concurrent execution and result aggregation.
- [sequential_agent_code_development_agent.py](https://github.com/gcp/adk-docs/blob/main/examples/python/snippets/agents/workflow-agents/sequential_agent_code_development_agent.py): Demonstrates a code development pipeline using ADK's `SequentialAgent` to orchestrate `LlmAgent`s for writing, reviewing, and refactoring Python code. The `SequentialAgent` ensures a fixed execution order: `CodeWriterAgent` generates code, `CodeReviewerAgent` provides feedback, and `CodeRefactorerAgent` refines it. This example highlights how output from one agent is passed as input to the next via session state.
- [after_agent_callback.py](https://github.com/gcp/adk-docs/blob/main/examples/python/snippets/callbacks/after_agent_callback.py): Demonstrates the `after_agent_callback` in ADK, which executes immediately after an agent's main processing logic completes. The callback function `modify_output_after_agent` inspects session state for a flag (`add_concluding_note`) to either allow the agent's original output or replace it with a new `types.Content` object. This illustrates post-processing or modification of an agent's final response.
- [after_model_callback.py](https://github.com/gcp/adk-docs/blob/main/examples/python/snippets/callbacks/after_model_callback.py): Demonstrates the `after_model_callback` in ADK, which is called immediately after a response is received from the LLM. The callback function `simple_after_model_modifier` inspects and can modify the `LlmResponse` before it's further processed. The example shows replacing a specific word ("joke" with "funny story") in the LLM's text response, illustrating post-processing and content modification.
- [after_tool_callback.py](https://github.com/gcp/adk-docs/blob/main/examples/python/snippets/callbacks/after_tool_callback.py): Demonstrates the `after_tool_callback` in ADK, which executes immediately after a tool's `run_async` method completes. The callback function `simple_after_tool_modifier` inspects the tool's result and can modify it before it's sent back to the LLM. The example shows adding a note to the result of `get_capital_city` for "Washington, D.C.", illustrating post-processing or enriching tool outputs.
- [before_agent_callback.py](https://github.com/gcp/adk-docs/blob/main/examples/python/snippets/callbacks/before_agent_callback.py): Demonstrates the `before_agent_callback` in ADK, which executes immediately before an agent's `_run_async_impl` method. The callback function `check_if_agent_should_run` inspects the session state for a `skip_llm_agent` flag. If the flag is true, it returns a `types.Content` object to bypass the agent's execution; otherwise, it returns `None` to allow normal processing.
- [before_model_callback.py](https://github.com/gcp/adk-docs/blob/main/examples/python/snippets/callbacks/before_model_callback.py): Demonstrates the `before_model_callback` in ADK, which executes just before an `LlmAgent` sends a request to the LLM. The callback function `simple_before_model_modifier` inspects the `llm_request` to modify the system instruction or to block the LLM call entirely if a "BLOCK" keyword is found in the user message. This illustrates implementing input guardrails and dynamic prompt modification.
- [before_tool_callback.py](https://github.com/gcp/adk-docs/blob/main/examples/python/snippets/callbacks/before_tool_callback.py): Demonstrates the `before_tool_callback` in ADK, which executes just before a tool's `run_async` method is invoked. The callback function `simple_before_tool_modifier` inspects tool arguments to modify them (e.g., changing "Canada" to "France") or to block tool execution entirely (e.g., for a "BLOCK" country). This illustrates argument validation, modification, and conditional tool blocking.
- [callback_basic.py](https://github.com/gcp/adk-docs/blob/main/examples/python/snippets/callbacks/callback_basic.py): Provides a basic example of defining and registering a callback function (`my_before_model_logic`) with an `LlmAgent` in ADK. The callback executes before a model call, printing a message to demonstrate its invocation. This illustrates the fundamental mechanism of integrating custom logic into the agent's lifecycle.
- [agent.py](https://github.com/gcp/adk-docs/blob/main/examples/python/snippets/get-started/google_search_agent/agent.py): Defines a basic `google_search_agent` using ADK, equipped with the `google_search` tool. The agent is configured with a Gemini model, a description, and instructions to answer questions by searching the internet. This serves as a simple example of integrating a built-in tool for grounding with Google Search.
- [agent.py](https://github.com/gcp/adk-docs/blob/main/examples/python/snippets/get-started/multi_tool_agent/agent.py): Defines a `weather_time_agent` using ADK, equipped with two function tools: `get_weather` and `get_current_time`. The agent is configured with a Gemini model, a description, and instructions to answer user questions about time and weather in a city. This demonstrates how to provide multiple tools to an agent for diverse capabilities.
- [agent.py](https://github.com/gcp/adk-docs/blob/main/examples/python/snippets/streaming/adk-streaming-ws/app/google_search_agent/agent.py): Defines a `google_search_agent` for streaming applications using ADK, equipped with the `google_search` tool. The agent is configured with a Gemini model that supports the Live API, a description, and instructions to answer questions via Google Search. This serves as a core agent definition for a WebSocket-based streaming web app.
- [main.py](https://github.com/gcp/adk-docs/blob/main/examples/python/snippets/streaming/adk-streaming-ws/app/main.py): Implements a FastAPI web application for ADK Streaming using WebSockets, enabling real-time, bidirectional audio and text communication. It manages agent sessions, streams agent events to clients, and relays client messages (text or Base64-encoded audio) to the ADK agent. The application serves `index.html` and static files, handling WebSocket connections and asynchronous messaging tasks.
- [agent.py](https://github.com/gcp/adk-docs/blob/main/examples/python/snippets/streaming/adk-streaming/app/google_search_agent/agent.py): Defines a `google_search_agent` for streaming applications using ADK, equipped with the `google_search` tool. The agent is configured with a Gemini model that supports the Live API, a description, and instructions to answer questions via Google Search. This serves as a core agent definition for a Server-Sent Events (SSE) based streaming web app.
- [main.py](https://github.com/gcp/adk-docs/blob/main/examples/python/snippets/streaming/adk-streaming/app/main.py): Implements a FastAPI web application for ADK Streaming using Server-Sent Events (SSE), enabling real-time, bidirectional audio and text communication. It manages agent sessions, streams agent events to clients, and relays client messages (text or Base64-encoded audio) to the ADK agent. The application serves `index.html` and static files, handling SSE connections and asynchronous messaging tasks.
- [agent_cli.py](https://github.com/gcp/adk-docs/blob/main/examples/python/snippets/tools/auth/agent_cli.py): Demonstrates an agent CLI for orchestrating agent interactions and handling authentication flows. It initializes in-memory services, sends an initial query, detects if authentication is required, and guides the user through a simulated OAuth 2.0 flow. The script then sends the authentication response back to the agent to resume execution.
- [helpers.py](https://github.com/gcp/adk-docs/blob/main/examples/python/snippets/tools/auth/helpers.py): Provides helper functions for managing user input and parsing authentication-related events in ADK. Includes `get_user_input` for asynchronous console input, `is_pending_auth_event` to detect `adk_request_credential` function calls, and `get_function_call_id` and `get_function_call_auth_config` to extract details from auth request events. These utilities are crucial for client-side handling of interactive authentication flows.
- [tools_and_agent.py](https://github.com/gcp/adk-docs/blob/main/examples/python/snippets/tools/auth/tools_and_agent.py): Configures an `LlmAgent` with tools that require OpenID Connect (OIDC) authentication, layered on OAuth 2.0. Defines `AuthScheme` and `AuthCredential` for the OIDC flow, using an `OpenAPIToolset` to integrate API endpoints protected by Okta. The agent's tools are designed to trigger the OIDC flow if credentials are not available, demonstrating secure access to external systems.
- [bigquery.py](https://github.com/gcp/adk-docs/blob/main/examples/python/snippets/tools/built-in-tools/bigquery.py): Demonstrates using ADK's `BigQueryToolset` to enable an agent to interact with Google BigQuery. The toolset includes functionalities like listing datasets and tables, fetching metadata, executing SQL queries, and asking data insights using natural language. It configures the toolset with credentials and a `BigQueryToolConfig` to block write operations, ensuring safe data interaction.
- [code_execution.py](https://github.com/gcp/adk-docs/blob/main/examples/python/snippets/tools/built-in-tools/code_execution.py): Demonstrates enabling an ADK `LlmAgent` to execute Python code using the `BuiltInCodeExecutor`. The `code_agent` is instructed to act as a calculator, writing and executing Python code for mathematical expressions. The example shows how to run queries asynchronously and inspect events for generated code and execution results.
- [google_search.py](https://github.com/gcp/adk-docs/blob/main/examples/python/snippets/tools/built-in-tools/google_search.py): Defines a basic `google_search_agent` using ADK, equipped with the `google_search` tool. The agent is configured with a Gemini model and instructions to answer questions by searching the internet. This example illustrates how to integrate a pre-built tool for web search capabilities.
- [vertexai_rag_engine.py](https://github.com/gcp/adk-docs/blob/main/examples/python/snippets/tools/built-in-tools/vertexai_rag_engine.py): Defines an ADK agent (`ask_rag_agent`) that performs private data retrieval using the `VertexAiRagRetrieval` tool. The tool is configured with a RAG corpus and parameters for similarity search. The agent's instruction guides it to use this tool for retrieving documentation and reference materials from the RAG corpus.
- [vertexai_search.py](https://github.com/gcp/adk-docs/blob/main/examples/python/snippets/tools/built-in-tools/vertexai_search.py): Defines a `doc_qa_agent` using ADK that leverages `VertexAiSearchTool` for document question answering. The tool is configured with a specific Vertex AI Search Datastore ID, enabling the agent to search private documents. The agent's instruction guides it to use the search tool and report if information is not found, demonstrating grounding with enterprise data.
- [func_tool.py](https://github.com/gcp/adk-docs/blob/main/examples/python/snippets/tools/function-tools/func_tool.py): Demonstrates a `stock_price_agent` using ADK, equipped with a `get_stock_price` function tool that retrieves real-time stock prices using `yfinance`. The agent's instruction guides it to use the tool, potentially performing a Google search for ticker symbols first, and handling cases where prices cannot be found. This illustrates wrapping a Python function as a tool for external data retrieval.
- [human_in_the_loop.py](https://github.com/gcp/adk-docs/blob/main/examples/python/snippets/tools/function-tools/human_in_the_loop.py): Demonstrates a human-in-the-loop workflow using ADK's `LongRunningFunctionTool` for a reimbursement agent. The `ask_for_approval` function simulates creating a ticket and returning a pending status. The `call_agent_async` function shows how the agent client can detect a long-running function call and then send back an intermediate or final response to update the progress, simulating manager approval.
- [summarizer.py](https://github.com/gcp/adk-docs/blob/main/examples/python/snippets/tools/function-tools/summarizer.py): Demonstrates using an `AgentTool` in ADK, where a `root_agent` delegates text summarization to a specialized `summary_agent`. The `main_agent` uses the `summarize` tool (which wraps `summary_agent`) to process long text. The `skip_summarization=True` flag ensures the `summary_agent`'s response is passed directly back to the `main_agent` without further LLM processing.
- [openapi_tool.py](https://github.com/gcp/adk-docs/blob/main/examples/python/snippets/tools/openapi_tool.py): Demonstrates integrating an OpenAPI Specification with ADK to generate callable tools for an agent. An `OpenAPIToolset` is initialized with a mock Pet Store API spec, which automatically creates `RestApiTool` instances for operations like `listPets`, `createPet`, and `showPetById`. The `petstore_manager_agent` then uses these tools based on user queries, showcasing dynamic API interaction.
- [customer_support_agent.py](https://github.com/gcp/adk-docs/blob/main/examples/python/snippets/tools/overview/customer_support_agent.py): Demonstrates agent delegation in ADK using a `main_agent` and a `support_agent`. The `main_agent` uses an `escalation_tool` (`check_and_transfer`) to detect urgent queries. If urgency is detected, the tool sets `tool_context.actions.transfer_to_agent` to "support_agent", effectively transferring control of the conversation to the specialized `support_agent`.
- [doc_analysis.py](https://github.com/gcp/adk-docs/blob/main/examples/python/snippets/tools/overview/doc_analysis.py): Demonstrates a tool (`process_document`) that interacts with ADK's artifact and memory services to analyze documents. The tool loads a document artifact, searches memory for related context, performs a placeholder analysis, and saves the result as a new artifact. This illustrates how tools can leverage contextual data and manage persistent binary data.
- [toolset_example.py](https://github.com/gcp/adk-docs/blob/main/examples/python/snippets/tools/overview/toolset_example.py): Demonstrates the use of `BaseToolset` in ADK to group and dynamically provide a collection of tools to an agent. A `SimpleMathToolset` is created, containing `add_numbers` and `subtract_numbers` as `FunctionTool` instances. The `calculator_agent` is then configured with both an individual tool and this toolset, showcasing modular tool management.
- [user_preference.py](https://github.com/gcp/adk-docs/blob/main/examples/python/snippets/tools/overview/user_preference.py): Demonstrates a tool (`update_user_preference`) that updates user-specific preferences stored in the session state using `ToolContext`. The tool reads existing preferences, modifies them, and writes the updated dictionary back to `tool_context.state`. This illustrates how tools can manage and persist user-specific data across interactions.
- [weather_sentiment.py](https://github.com/gcp/adk-docs/blob/main/examples/python/snippets/tools/overview/weather_sentiment.py): Demonstrates an ADK agent (`weather_sentiment_agent`) that uses two sequential tools: `get_weather_report` and `analyze_sentiment`. The agent is instructed to retrieve weather information and then analyze user feedback on that weather. This showcases how an agent can orchestrate multiple tools to achieve a complex task and handle different tool return values.
- [crewai_serper_search.py](https://github.com/gcp/adk-docs/blob/main/examples/python/snippets/tools/third-party/crewai_serper_search.py): Demonstrates integrating CrewAI tools into an ADK agent using the `CrewaiTool` wrapper. An `InternetNewsSearch` agent is defined, equipped with a wrapped `SerperDevTool` for searching recent news articles. This example illustrates how to leverage third-party tools for enhanced agent capabilities.
- [langchain_tavily_search.py](https://github.com/gcp/adk-docs/blob/main/examples/python/snippets/tools/third-party/langchain_tavily_search.py): Demonstrates integrating LangChain tools into an ADK agent using the `LangchainTool` wrapper. A `langchain_tool_agent` is defined, equipped with a wrapped `TavilySearchResults` tool for internet searches. This example illustrates how to leverage third-party tools for enhanced agent capabilities.
- [readme.md](https://github.com/gcp/adk-docs/blob/main/examples/python/tutorial/agent_team/adk-tutorial/readme.md): Provides setup instructions for a "Progressive Weather Bot" tutorial, structured for ADK's command-line tools (`adk web`, `adk run`, `adk api_server`). Details prerequisites, repository cloning, virtual environment setup, and API key configuration for each step. Notes that this version handles runners and session services automatically, contrasting it with the interactive notebook tutorial.
- [agent.py](https://github.com/gcp/adk-docs/blob/main/examples/python/tutorial/agent_team/adk-tutorial/step_1/agent.py): Defines the initial `weather_agent_v1` for the ADK tutorial, equipped with a mock `get_weather` tool. The agent uses a Gemini model and instructions to provide weather information for specific cities. This serves as the foundational single-agent example for the progressive weather bot tutorial.
- [agent.py](https://github.com/gcp/adk-docs/blob/main/examples/python/tutorial/agent_team/adk-tutorial/step_2 _anthropic/agent.py): Defines a `weather_agent_claude` for the ADK tutorial, powered by Anthropic's Claude Sonnet model via `LiteLlm`. The agent uses a mock `get_weather` tool and instructions to provide weather information. This demonstrates integrating a third-party LLM for the weather bot.
- [agent.py](https://github.com/gcp/adk-docs/blob/main/examples/python/tutorial/agent_team/adk-tutorial/step_2_gpt4/agent.py): Defines a `weather_agent_gpt` for the ADK tutorial, powered by OpenAI's GPT-4o model via `LiteLlm`. The agent uses a mock `get_weather` tool and instructions to provide weather information. This demonstrates integrating a third-party LLM for the weather bot.
- [agent.py](https://github.com/gcp/adk-docs/blob/main/examples/python/tutorial/agent_team/adk-tutorial/step_3/agent.py): Defines a multi-agent team for the ADK tutorial, featuring a `weather_agent_v2` as the root agent orchestrating `greeting_agent` and `farewell_agent` sub-agents. The root agent uses a mock `get_weather` tool, while sub-agents use `say_hello` and `say_goodbye` tools. This demonstrates agent delegation and collaboration within a team.
- [agent.py](https://github.com/gcp/adk-docs/blob/main/examples/python/tutorial/agent_team/adk-tutorial/step_5/agent.py): Defines an ADK agent (`weather_agent_v5_model_guardrail`) with a `before_model_callback` (`block_keyword_guardrail`) to implement an input safety guardrail. The guardrail checks for a "BLOCK" keyword in user messages, preventing the LLM call and returning a predefined response. This demonstrates using callbacks for safety and control before LLM interaction.
- [agent.py](https://github.com/gcp/adk-docs/blob/main/examples/python/tutorial/agent_team/adk-tutorial/step_6/agent.py): Defines an ADK agent (`weather_agent_v6_tool_guardrail`) incorporating both `before_model_callback` (input guardrail) and `before_tool_callback` (tool argument guardrail). The `block_paris_tool_guardrail` specifically blocks the `get_weather_stateful` tool if called for "Paris". This demonstrates layered safety mechanisms to control LLM interaction and tool execution.

